//'number' + 3 + 3
//результат = number33, виконуєтся конкатенація, спочатку до строки 'number' додаєтся число 3 і потім ще раз 3

//null + 3 
//результат = 3, null вказує на відсутність будь-якого значення, відповідно якщо до числа 3 додати "нічого" - буде 3

//5 && "qwerty"
//результат = qwerty, логічний оператор AND поверне qwerty як останнє обчислене значення

//+'40' + +'2' + "hillel"
/*результат = 42hillel, унарний '+' перед строками 40 і 2 приводить їх до числел, таким чином проходить математична операція 
складання 40 + 2 а в кінці додаєтся строка hillel в рамках конкатенації*/

//'10' - 5 === 6
/*результат = false, під час математичної операції віднімання строка '10' приводится до числа 10, потім відбуваєтся віднімання 10 - 5
дорівнює 5, потім відбуваєтся строге порівняння 5 та 6 і оскільки 5 не дорівнює 6 - повертаєтся значення false*/

//true + false 
/* результат = 1, JS перетворює логічні значення true та false на числа, true перетворюєтся на 1 а false на 0, потім відбуваєтся
математична операція складання 1 + 0 = 1*/

//'4px' - 3
/* результат = NaN, строка '4px' не може бути преведена до числа, оскільки містить техст "px", потім відбуваєтся спроба відняти 
'4px' - 3 і оскільки не можна виконати віднімання числа від строки - JS повертає значення NaN*/

//'4' - 3
/* результат = 1, під час математичної операції віднімання строка '4' приводится до числа 4, потім відбуваєтся віднімання 4 - 3
дорівнює 1*/

//'6' + 3 ** 0
/*результат = 61, спочатку число 3 зводиться у ступінь 0 що дорывнюэ 1, а потім відбуваєтся конкатенація: до строки 6 додаєтся 1 
і отримуємо 61*/

//12 / '6'
/* результат = 2, під час математичної операції ділення строка '6' приводится до числа 6, потім відбуваєтся ділення 12 / 6 
дорівнює 2*/

//'10' + (5 === 6);
/*результат = 10false, спочатку відбувахтся суворе порівняння 5 === 6, оскільки 5 не дорівнбє 6 то цей вираз повертає логічне 
значення false, потім відбуваєтся конкатенація при якій логічне значення false проводится до строки і отримуємо 10false */

//null == ''
/*результат = false, спочатку відбуваєтся несуворе порівняння ==, при ньому відбуваєтся автоматичне приведення типів, null 
може бутти неявно приведений тільки до undefined і не може бути приведений до строки, тому його порівняння з непорожньою строкою ''
повертає false*/ 

//3 ** (9 / 3);
/*результат = 27, спочатку відбуваєтся операція ділення в дужках, 9 поділити на 3 дорівнює 3, потім відбуваєтся возведення 3 в ступінь 3, 
дорівнює 27*/

//!!'false' == !!'true'
/*результат = true, !!'false' - спочатку строка 'false' приводится до true, оскільки всі не порожні строки приводятся до true, потім 
подвійне заперечення !! приводить до зворотнього значення false, з !!'true' - аналогічно, рядок 'true' перетворюється на true, і !!'true' 
дорівнює !true, що також дає false, потім відбуаєтся порівняння true з true що дорівнює true */

//0 || '0' && 1
/*результат = 1, спочатку йде логічний оператор || (або), якщо перший операнд є хибним перертаєтся другий, оскільки 0 вважаєтся 
хибним то результатом буде друге значення 0, потім використовуєтся логічний оператор && (і) якщо перший операнд є істинним - 
повертаєтся другий, не порожня строка '0' вважаєтся істинним значенням - відповідно повертаєтся 1*/ 

//(+null == false) < 1;
/*результат = false, спочатку унарний плюс приводить null в число 0, потім при не суворому порівнянні 0 приводится до логічного 
значення false, false = false повертає true, потім відбуваєтся порівняння, логічне значення true яке ми отримали до цього при 
не суворому порівнянні приводится до числа 1 і оскільки 1 не меншe 1 ми отримуємо false*/

//false && true || true
/*результат = true, спочатку у випадку з логічним оператором && (і) якщо перший операнд false то другий операнд не оцінюєтся,
отримуємо false, потім у випадку логічним оператором || (або) - якщо перший операнд false то результат дорівнбє значенню другого 
операнда - true*/

//false && (false || true);
/*результат = false, спочатку в скобках виконуєтся дія з логічним оператором || (або), оскільки один з операторів true то і 
результат буде true, потім виконуєтся дія з логічним оператором && (і), оскільки один за операндів false то і загальний результат
ми отримуємо false*/

//(+null == false) < 1 ** 5;
/*результат = false, спочатку унарний плюс приводить null в число 0, потім при не суворому порівнянні 0 приводится до логічного 
значення false, false = false повертає true, 1 ** 5 - приводить число 1 до ступіня 5 - дорівнює 1, потім відбуваєтся порівняння, логічне значення true яке ми отримали до цього при 
не суворому порівнянні приводится до числа 1 і оскільки 1 не меншe 1 ми отримуємо false  
*/ 







